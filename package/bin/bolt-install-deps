#!/bin/sh -e

###############################################################################
# FUNCTIONS
###############################################################################

#
# Print usage information for the bolt-install-deps command to stdout.
#
usage() {
    cat << "EOF"
Copyright (C) 2022 Tobias Koch <tobias.koch@gmail.com>

This tool can be used to install the build dependencies of a Bolt Linux package
recipe.

USAGE:

  bolt-install-deps [OPTIONS] package.xml

OPTIONS:

  -h, --help           Print this help message and exit.

  --build-for=<what>   Specify if the package will be built for the target or
                       for the tools folder. `what` must be one of 'target'
                       (default), 'tools' or 'cross-tools'.

EOF
}

#
# Print the message passed in $1 to stderr and exit 1.
#
die() {
    ESC_RED="\033[0;31m"
    ESC_BLD="\033[1m"
    ESC_END="\033[0m"

    if [ -t 1 ]; then
        echo "${ESC_BLD}bolt-install-deps${ESC_END}: ${ESC_RED}${ESC_BLD}error${ESC_END}: $1" >&2
    else
        echo "bolt-install-deps: error: $1" >&2
    fi

    exit 1
}

#
# Determine which command to use to install packages.
#
determine_install_command() {
    if [ $(cat /etc/os-release | grep ^ID= | cut -d= -f2) = "bolt" ]; then
        echo "opkg install"
    elif [ -f /etc/debian_version ]; then
        echo "apt-get install"
    else
        die "the current OS platform is not supported."
    fi
}

#
# Check if invoking bolt-pack on the input file works, at all.
#
try_list_build_dependencies() {
    if ! bolt-pack --build-for="$BUILD_FOR" --list-deps $1 >/dev/null 2>&1; then
        die "failed to list build dependencies, check input file!"
    fi
}

#
# Use bolt-pack to list the build dependencies and turn them into a plain list.
#
list_build_dependencies() {
    bolt-pack --build-for="$BUILD_FOR" --list-deps $1 | \
        sed -e 's/,/\n/g' -e 's/([^)]\+)//g' | awk '{print $1}'
}

###############################################################################
# VARIABLES
###############################################################################

BUILD_FOR=target
INSTALL_CMD=$(determine_install_command)

###############################################################################
# SETUP
###############################################################################

while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        --build-for)
            BUILD_FOR="$2"
            shift 2
            ;;
        --build-for=*)
            BUILD_FOR=$(echo $1 | cut -d= -f2)
            shift
            ;;
        -*)
            die "unknown option: $1"
            ;;
        *)
            break
            ;;
    esac
done

case "$BUILD_FOR" in
    target|tools|cross-tools)
        true
        ;;
    *)
        die "invalid argument --build-for=\"$BUILD_FOR\""
        ;;
esac

if [ $# -ne 1 ]; then
    usage
    exit 1
fi

test -f "$1" || die "no such file: $1"

###############################################################################
# MAIN
###############################################################################

try_list_build_dependencies "$1"
$INSTALL_CMD $(list_build_dependencies "$1")
